# NuGet test pipeline

trigger: none

parameters:
- name: DartLabEnvironment
  displayName: DartLab Environment
  type: string
  default: Production
  values:
  - Production
  - Staging

variables:
  BuildConfiguration: Release

resources:
  pipelines:
  - pipeline: DartLab
    source: DartLab
    branch: main
  repositories:
  - repository: DartLabTemplates
    type: git
    name: DartLab.Templates
    ref: refs/heads/main

stages:
- stage: Build
  displayName: Build VS Bootstrapper and test binaries
  pool:
    vmImage: windows-latest
  jobs:
  - job: BuildBinaries
    steps:
    - task: PowerShell@1
      inputs:
        scriptName: "$(Build.Repository.LocalPath)\\configure.ps1"
        arguments: "-Force"
      displayName: "Run Configure.ps1"

    - task: PowerShell@1
      displayName: "Get Visual Studio target versions"
      name: "GetVsVersions"
      inputs:
        scriptType: "inlineScript"
        inlineScript: |
          try {
            $msbuildExe = 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\bin\msbuild.exe'
            $targetChannel = & $msbuildExe $env:BUILD_REPOSITORY_LOCALPATH\build\config.props /v:m /nologo /t:GetVsTargetChannel
            $targetChannel = $targetChannel.Trim()
            $targetMajorVersion = & $msbuildExe $env:BUILD_REPOSITORY_LOCALPATH\build\config.props /v:m /nologo /t:GetVsTargetMajorVersion
            $targetMajorVersion = $targetMajorVersion.Trim()
            Write-Host "##vso[task.setvariable variable=VsTargetChannel;isOutput=true]$targetChannel"
            Write-Host "##vso[task.setvariable variable=VsTargetMajorVersion;isOutput=true]$targetMajorVersion"
          } catch {
            Write-Host "##vso[task.LogIssue type=error;]Unable to set VS target versions"
            exit 1
          }

    - task: PowerShell@1
      inputs:
        scriptName: "$(Build.Repository.LocalPath)\\scripts\\cibuild\\ConfigureVstsBuild.ps1"
        arguments: "-BuildRTM false"
      displayName: "Configure VSTS CI Environment"

    - task: MicroBuildLocalizationPlugin@1
      displayName: "Install Localization Plugin"

    # - task: MicroBuildSigningPlugin@1
    #   inputs:
    #     signType: "test"
    #     esrpSigning: "true"
    #   displayName: "Install Signing Plugin"

    - task: MicroBuildSwixPlugin@1
      displayName: "Install Swix Plugin"
      inputs:
        dropName: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.DefinitionName)/$(Build.SourceBranchName)/$(Build.BuildNumber)

    # - task: MicroBuildOptProfPlugin@6
    #   displayName: 'OptProfV2:  install the plugin'
    #   inputs:
    #     getDropNameByDrop: true
    #     optimizationInputsDropNamePrefix: OptimizationInputs/$(System.TeamProject)/$(Build.Repository.Name)
    #     AccessToken: $(System.AccessToken)
    #   condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true'))"

    # NuGet.Client's official repo is on github, hence the source link metadata should use the github URL.
    # However, our official builds are built from a mirror in Azure DevOps, hence without any extra help, the SourceLink.GitHub package
    # won't be able to determine the URL to embed in the pdbs.
    # Therefore, we need to add the GitHub repo URL as a remote, and tell SourceLink.GitHub what that remote name is.
    # We do this even when github is the origin URL, to avoid warnings in the CI logs.
    - task: PowerShell@1
      displayName: "Prepare for source link"
      inputs:
        scriptType: "inlineScript"
        inlineScript: |
          try {
            $nugetUrl = "https://github.com/NuGet/NuGet.Client.git"
            if (@(& git remote).Contains("github"))
            {
              $currentGitHubRemoteUrl = & git remote get-url github
              Write-Host "Current github remote URL: $currentGitHubRemoteUrl"
              if ($currentGitHubRemoteUrl -ne $nugetUrl)
              {
                Write-Host "git remote set-url github $nugetUrl"
                & git remote set-url github $nugetUrl
              }
              else
              {
                Write-Host "Git remote url already correct"
              }
            }
            else
            {
              Write-Host "git remote add github $nugetUrl"
              & git remote add github $nugetUrl
            }
          } catch {
            Write-Host "##vso[task.LogIssue type=error;]$Error[0]"
            exit 1
          }

    - task: MSBuild@1
      displayName: "Restore for VS2019"
      inputs:
        solution: "build\\build.proj"
        configuration: "$(BuildConfiguration)"
        msbuildArguments: "/t:RestoreVS /p:BuildNumber=12345 /p:BuildRTM=false /v:m /p:IncludeApex=true"
        maximumCpuCount: true

    - task: MSBuild@1
      displayName: "Build for VS2019"
      inputs:
        solution: "build\\build.proj"
        configuration: "$(BuildConfiguration)"
        msbuildArguments: "/t:BuildNoVSIX /p:BuildRTM=false /p:BuildNumber=12345 /p:SkipILMergeOfNuGetExe=true /p:GitRepositoryRemoteName=github /p:IncludeApex=true"
        maximumCpuCount: true

    - task: MSBuild@1
      displayName: "Localize Assemblies"
      inputs:
        solution: "build\\loc.proj"
        configuration: "$(BuildConfiguration)"
        msbuildArguments: "/t:AfterBuild"

    # - task: MSBuild@1
    #   displayName: "Sign Assemblies"
    #   inputs:
    #     solution: "build\\sign.proj"
    #     configuration: "$(BuildConfiguration)"
    #     msbuildArguments: "/t:AfterBuild"
    #     maximumCpuCount: true

    - task: MSBuild@1
      displayName: "Pack VSIX"
      inputs:
        solution: "build\\build.proj"
        configuration: "$(BuildConfiguration)"
        msbuildArguments: "/t:BuildVSIX /p:BuildRTM=false /p:ExcludeTestProjects=false  /p:IsCIBuild=true"
        maximumCpuCount: true

    - task: MSBuild@1
      displayName: "Generate Build Tools package"
      inputs:
        solution: "setup/Microsoft.VisualStudio.NuGet.BuildTools.vsmanproj"
        configuration: "$(BuildConfiguration)"
        msbuildArguments: "/p:BuildNumber=12345 /p:IsVsixBuild=true"

    # - task: MSBuild@1
    #   displayName: "Sign Nupkgs and VSIX"
    #   inputs:
    #     solution: "build\\sign.proj"
    #     configuration: "$(BuildConfiguration)"
    #     msbuildArguments: "/t:AfterBuild /p:SignPackages=true"

    # - task: MicroBuildCodesignVerify@3
    #   displayName: Verify Assembly Signatures and StrongName for the VSIX & exes
    #   inputs:
    #     TargetFolders: '$(Build.Repository.LocalPath)\\artifacts\\VS15'
    #     ApprovalListPathForCerts: '$(Build.Repository.LocalPath)\\build\\ignorecodesign.csv'
    #     ApprovalListPathForSigs: '$(Build.Repository.LocalPath)\\build\\ignorecodesign.csv'

    # - task: ComponentGovernanceComponentDetection@0
    #   displayName: 'Component Detection'
    #   condition: "and(succeeded(),eq(variables['BuildRTM'], 'true'))"

    - task: MSBuild@1
      displayName: "Generate VSMAN file for NuGet Core VSIX"
      inputs:
        solution: "setup\\Microsoft.VisualStudio.NuGet.Core.vsmanproj"
        configuration: "$(BuildConfiguration)"

    - task: MSBuild@1
      displayName: "Generate VSMAN file for Build Tools VSIX"
      inputs:
        solution: "setup\\Microsoft.VisualStudio.NuGet.BuildTools.vsmanproj"
        configuration: "$(BuildConfiguration)"

    - task: NuGetCommand@2
      displayName: 'OptProfV2:  add the NuGet package source'
      inputs:
        command: 'custom'
        arguments: 'sources add -Name VS -Source $(VsPackageFeedUrl) -UserName $(VsPackageFeedUsername) -Password $(VsPackageFeedPassword) -ConfigFile $(System.DefaultWorkingDirectory)\NuGet.config'

    - task: NuGetCommand@2
      displayName: 'OptProfV2:  install the NuGet package for building .runsettingsproj file'
      inputs:
        command: 'custom'
        arguments: 'install Microsoft.DevDiv.Validation.TestPlatform.Settings.Tasks -Version 1.0.655 -Source $(VsPackageFeedUrl) -ConfigFile $(System.DefaultWorkingDirectory)\NuGet.config -OutputDirectory $(System.DefaultWorkingDirectory)\packages'

    - task: MicroBuildBuildVSBootstrapper@2
      displayName: 'OptProfV2:  build a Visual Studio bootstrapper'
      inputs:
        channelName: "$(VsTargetChannel)"
        vsMajorVersion: "$(VsTargetMajorVersion)"
        manifests: '$(Build.Repository.LocalPath)\artifacts\VS15\Microsoft.VisualStudio.NuGet.Core.vsman'
        outputFolder: '$(Build.Repository.LocalPath)\artifacts\VS15'
      continueOnError: true

    - task: PublishBuildArtifacts@1
      displayName: 'OptProfV2:  publish BootstrapperInfo.json as a build artifact'
      inputs:
        PathtoPublish: $(Build.StagingDirectory)\MicroBuild\Output
        ArtifactName: MicroBuildOutputs
        ArtifactType: Container

    - task: PowerShell@1
      displayName: "Set Bootstrapper URL variable"
      name: "vsbootstrapper"
      inputs:
        scriptType: "inlineScript"
        inlineScript: |
          try {
            $json = Get-Content "${env:Build_StagingDirectory}\MicroBuild\Output\Bootstrapperinfo.json" | ConvertFrom-Json
            $bootstrapperUrl = $json[0].bootstrapperUrl;
            Write-Host "Bootstrapper URL: $bootstrapperUrl"
            Write-Host "##vso[task.setvariable variable=bootstrapperUrl;isOutput=true]$bootstrapperUrl"
          } catch {
            Write-Host "##vso[task.LogIssue type=error;]Unable to set bootstrapperUrl: $_"
            exit 1
          }

    - task: MSBuild@1
      displayName: 'OptProfV2:  generate a .runsettings file'
      inputs:
        solution: 'build\NuGet.OptProfV2.runsettingsproj'
        msbuildArguments: '/p:OutputPath="$(Build.Repository.LocalPath)\artifacts\RunSettings" /p:TestDrop="RunSettings/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)" /p:ProfilingInputsDrop="ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)" /p:IncludeProfilingInputs=false'

    - task: CopyFiles@2
      displayName: 'OptProfV2:  copy test binaries'
      inputs:
        sourceFolder: 'test\NuGet.Tests.Apex\NuGet.OptProf\bin\$(BuildConfiguration)'
        Contents: '**'
        targetFolder: 'artifacts\RunSettings\NuGet.OptProf'

    - task: artifactDropTask@0
      displayName: 'OptProfV2:  publish the .runsettings file to artifact services'
      inputs:
        dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
        buildNumber: 'RunSettings/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)'
        sourcePath: 'artifacts\RunSettings'
        toLowerCase: false
        usePat: true
        dropMetadataContainerName: 'DropMetadata-RunSettings'

    - task: PublishPipelineArtifact@1
      displayName: "Publish localizationArtifacts artifact"
      inputs:
        targetPath: "$(Build.Repository.LocalPath)\\artifacts\\RunSettings\\"
        artifactName: "RunSettings"
      condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'))"

    # - task: artifactDropTask@0
    #   displayName: 'OptProfV2:  publish profiling inputs to artifact services'
    #   inputs:
    #     dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
    #     buildNumber: 'ProfilingInputs/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildId)'
    #     sourcePath: '$(Build.ArtifactStagingDirectory)\OptProf\ProfilingInputs'
    #     toLowerCase: false
    #     usePat: true
    #     dropMetadataContainerName: 'DropMetadata-ProfilingInputs'
    #   condition: "and(succeeded(), eq(variables['BuildRTM'], 'false'), eq(variables['IsOfficialBuild'], 'true'))"

    # - task: PublishBuildArtifacts@1
    #   displayName: "Publish NuGet.exe VSIX and EndToEnd.zip as artifact"
    #   inputs:
    #     PathtoPublish: "$(Build.Repository.LocalPath)\\artifacts\\VS15"
    #     ArtifactName: "$(VsixPublishDir)"
    #     ArtifactType: "Container"

    - task: artifactDropTask@0
      displayName: "Upload VSTS Drop"
      inputs:
        dropServiceURI: 'https://devdiv.artifacts.visualstudio.com'
        # MicroBuild.ManifestDropName is created by the SWIX plugin installer
        buildNumber: "$(MicroBuild.ManifestDropName)"
        sourcePath: "$(Build.Repository.LocalPath)\\artifacts\\VS15"
        toLowerCase: false
        usePat: true
        dropMetadataContainerName: "DropMetadata-Product"

    - task: MicroBuildCleanup@1
      displayName: "Perform Cleanup Tasks"

- template: stages\visual-studio\single-runsettings.yml@DartLabTemplates
  parameters:
    name: RunOnDartlab
    displayName: Run NuGet.OptProf.dll
    dependsOn: Build
    variables:
    - name: bootstrapperUrl
      value: $[stageDependencies.Build.BuildBinaries.outputs['vsbootstrapper.bootstrapperUrl']]
    runSettingsURI: $(Pipeline.Workspace)\NuGet\RunSettings\NuGet.OptProfV2.runsettings
    visualStudioBootstrapperURI: $(bootstrapperUrl)
    testLabPoolName: VS-Platform
    dartLabEnvironment: ${{parameters.DartLabEnvironment}}
    visualStudioSigning: Test
    preTestMachineConfigurationStepList:
    - download: current
      artifact: RunSettings
      displayName: Download NuGet RunSettings
    preDeployAndRunTestsStepList:
    - download: current
      artifact: RunSettings
      displayName: Download NuGet RunSettings
